C51 COMPILER V9.60.0.0   GEN                                                               10/20/2025 19:41:56 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE GEN
OBJECT MODULE PLACED IN .\src\gen.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5_2\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\src\tennp\g
                    -it\LightCube\Firmware\LightCube\src\gen.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZ
                    -E(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/SiliconLabs/SimplicityStudio/v5_2/developer/sdks/8051/
                    -v4.3.1//Device/EFM8BB50/inc;C:/SiliconLabs/SimplicityStudio/v5_2/developer/sdks/8051/v4.3.1//Device/shared/si8051Base) P
                    -RINT(.\src\gen.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\gen.OBJ)

line level    source

   1          #include "main.h"
   2          
   3          #define TICKS_PER_MS  (PCA_FREQ / 1000) // Number of PCA ticks per millisecond
   4          void delay_ms(uint16_t ms)
   5          {
   6   1          uint16_t start, elapsed;
   7   1      
   8   1          while (ms > 0) {
   9   2              start = PCA0L;
  10   2              start |= ((uint16_t)PCA0H << 8);
  11   2      
  12   2              do {
  13   3                  uint16_t now = PCA0L;
  14   3                  now |= ((uint16_t)PCA0H << 8);
  15   3      
  16   3                  // Handle counter wrap-around
  17   3                  elapsed = now - start;
  18   3              } while (elapsed < TICKS_PER_MS);
  19   2      
  20   2              ms--;
  21   2          }
  22   1      }
  23          
  24          void set_pwm(uint8_t ch, uint16_t val, bit apply_brightness){
  25   1        if(apply_brightness){
  26   2            val = (uint32_t)((uint32_t)val * brightness_correction) / 65535;
  27   2        }
  28   1      
  29   1        IE_EA = 0;
  30   1        pwm_channels[ch].u16 = val;
  31   1        IE_EA = 1;
  32   1        switch (ch) {
  33   2      //    case 0:
  34   2          case 1:
  35   2            SFRPAGE = 0x10;
  36   2            if(val==0) PWMCFG2 &= ~(PWMCFG2_CH0EN__BMASK);
  37   2            PWMCPUDL0 = pwm_channels[ch].u8[1];
  38   2            PWMCPUDH0 = pwm_channels[ch].u8[0];
  39   2            if(val!=0) PWMCFG2 |= PWMCFG2_CH0EN__ENABLE;
  40   2            SFRPAGE = 0x00;
  41   2            break;
  42   2          case 2:
  43   2            SFRPAGE = 0x10;
  44   2            if(val==0) PWMCFG2 &= ~(PWMCFG2_CH1EN__BMASK);
  45   2            PWMCPUDL1 = pwm_channels[ch].u8[1];
  46   2            PWMCPUDH1 = pwm_channels[ch].u8[0];
  47   2            if(val!=0) PWMCFG2 |= PWMCFG2_CH1EN__ENABLE;
  48   2            SFRPAGE = 0x00;
  49   2            break;
  50   2          case 3:
  51   2            SFRPAGE = 0x10;
  52   2            if(val==0) PWMCFG2 &= ~(PWMCFG2_CH2EN__BMASK);
C51 COMPILER V9.60.0.0   GEN                                                               10/20/2025 19:41:56 PAGE 2   

  53   2            PWMCPUDL2 = pwm_channels[ch].u8[1];
  54   2            PWMCPUDH2 = pwm_channels[ch].u8[0];
  55   2            if(val!=0) PWMCFG2 |= PWMCFG2_CH2EN__ENABLE;
  56   2            SFRPAGE = 0x00;
  57   2            break;
  58   2        }
  59   1      }
  60          
  61          static uint16_t seed;
  62          void rand_set(uint16_t seedval){
  63   1        seed = seedval;
  64   1      }
  65          
  66          //LCG pseudo random number generator
  67          uint16_t rand(void) {
  68   1          seed = (seed * 2053 + 13849) & 0xFFFF;
  69   1          return seed;
  70   1      }
  71          
  72          uint16_t getRAW_Ambient(void) {
  73   1          uint16_t adcraw; // raw data from ADC
  74   1          ADC0CN0_ADBUSY = 1; // start the conversion (32 times 10 bit)
  75   1          while(!ADC0CN0_ADINT);
  76   1          adcraw = ADC0;
  77   1          ADC0CN0_ADINT = 0;
  78   1          return adcraw;;
  79   1      }
  80          
  81          // Gamma-corrected brightness curve (64 steps, gamma = 2.2)
  82          const uint16_t code brightness_curve[MAX_STEPS] = {
  83                  0,     2,     7,    17,    33,    53,    79,   112,
  84                150,   194,   244,   301,   365,   435,   512,   596,
  85                687,   785,   891,  1003,  1123,  1250,  1385,  1527,
  86               1677,  1835,  2000,  2173,  2354,  2543,  2740,  2945,
  87               3158,  3379,  3609,  3846,  4092,  4347,  4609,  4880,
  88               5160,  5448,  5745,  6050,  6364,  6686,  7017,  7357,
  89               7706,  8064,  8430,  8806,  9190,  9583,  9986, 10397,
  90              10817, 11247, 11685, 12133, 12590, 13057, 13532, 14017,
  91              14511, 15015, 15528, 16050, 16582, 17123, 17673, 18234,
  92              18803, 19383, 19972, 20570, 21178, 21796, 22424, 23061,
  93              23708, 24365, 25032, 25709, 26395, 27091, 27797, 28513,
  94              29239, 29975, 30721, 31477, 32243, 33019, 33805, 34602,
  95              35408, 36225, 37051, 37888, 38735, 39592, 40460, 41338,
  96              42226, 43124, 44033, 44952, 45881, 46821, 47772, 48732,
  97              49703, 50685, 51677, 52679, 53692, 54716, 55750, 56795,
  98              57850, 58916, 59992, 61080, 62177, 63286, 64405, 65535
  99          };
 100          
 101          // Gamma-corrected ambient brightness scale (10 levels)
 102          const uint16_t code ambient_scale[10] = {
 103              0, 521, 2395, 5845, 11007, 17983, 26857, 37701, 50575, 65535
 104          };
 105          
 106          
 107          void setBrightnessLevel(uint8_t level) {
 108   1          if (level > 9) level = 9;
 109   1          ambient_level = level;
 110   1          brightness_correction = ambient_scale[level];
 111   1      }
 112          


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.60.0.0   GEN                                                               10/20/2025 19:41:56 PAGE 3   

   CODE SIZE        =    336    ----
   CONSTANT SIZE    =    276    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
