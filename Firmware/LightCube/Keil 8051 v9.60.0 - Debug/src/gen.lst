C51 COMPILER V9.60.0.0   GEN                                                               10/19/2025 22:18:25 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE GEN
OBJECT MODULE PLACED IN .\src\gen.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5_2\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\src\tennp\g
                    -it\LightCube\Firmware\LightCube\src\gen.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZ
                    -E(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/SiliconLabs/SimplicityStudio/v5_2/developer/sdks/8051/
                    -v4.3.1//Device/EFM8BB50/inc;C:/SiliconLabs/SimplicityStudio/v5_2/developer/sdks/8051/v4.3.1//Device/shared/si8051Base) P
                    -RINT(.\src\gen.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\gen.OBJ)

line level    source

   1          #include "main.h"
   2          
   3          #define TICKS_PER_MS  (PCA_FREQ / 1000) // Number of PCA ticks per millisecond
   4          void delay_ms(uint16_t ms)
   5          {
   6   1          uint16_t start, elapsed;
   7   1      
   8   1          while (ms > 0) {
   9   2              start = PCA0L;
  10   2              start |= ((uint16_t)PCA0H << 8);
  11   2      
  12   2              do {
  13   3                  uint16_t now = PCA0L;
  14   3                  now |= ((uint16_t)PCA0H << 8);
  15   3      
  16   3                  // Handle counter wrap-around
  17   3                  elapsed = now - start;
  18   3              } while (elapsed < TICKS_PER_MS);
  19   2      
  20   2              ms--;
  21   2          }
  22   1      }
  23          
  24          void set_pwm(uint8_t ch, uint16_t val, bit apply_brightness){
  25   1        if(apply_brightness){
  26   2            //val = ((uint32_t)val * apply_brightness) / 65535;
  27   2            val = val / 4;
  28   2        }
  29   1      
  30   1        IE_EA = 0;
  31   1        pwm_channels[ch].u16 = val;
  32   1        IE_EA = 1;
  33   1        switch (ch) {
  34   2      //    case 0:
  35   2          case 1:
  36   2            SFRPAGE = 0x10;
  37   2            if(val==0) PWMCFG2 &= ~(PWMCFG2_CH0EN__BMASK);
  38   2            PWMCPUDL0 = pwm_channels[ch].u8[1];
  39   2            PWMCPUDH0 = pwm_channels[ch].u8[0];
  40   2            if(val!=0) PWMCFG2 |= PWMCFG2_CH0EN__ENABLE;
  41   2            SFRPAGE = 0x00;
  42   2            break;
  43   2          case 2:
  44   2            SFRPAGE = 0x10;
  45   2            if(val==0) PWMCFG2 &= ~(PWMCFG2_CH1EN__BMASK);
  46   2            PWMCPUDL1 = pwm_channels[ch].u8[1];
  47   2            PWMCPUDH1 = pwm_channels[ch].u8[0];
  48   2            if(val!=0) PWMCFG2 |= PWMCFG2_CH1EN__ENABLE;
  49   2            SFRPAGE = 0x00;
  50   2            break;
  51   2          case 3:
  52   2            SFRPAGE = 0x10;
C51 COMPILER V9.60.0.0   GEN                                                               10/19/2025 22:18:25 PAGE 2   

  53   2            if(val==0) PWMCFG2 &= ~(PWMCFG2_CH2EN__BMASK);
  54   2            PWMCPUDL2 = pwm_channels[ch].u8[1];
  55   2            PWMCPUDH2 = pwm_channels[ch].u8[0];
  56   2            if(val!=0) PWMCFG2 |= PWMCFG2_CH2EN__ENABLE;
  57   2            SFRPAGE = 0x00;
  58   2            break;
  59   2        }
  60   1      }
  61          
  62          static uint16_t seed;
  63          void rand_set(uint16_t seedval){
  64   1        seed = seedval;
  65   1      }
  66          
  67          //LCG pseudo random number generator
  68          uint16_t rand(void) {
  69   1          seed = (seed * 2053 + 13849) & 0xFFFF;
  70   1          return seed;
  71   1      }
  72          
  73          uint16_t getRAW_Ambient(void) {
  74   1          uint16_t adcraw; // raw data from ADC
  75   1          ADC0CN0_ADBUSY = 1; // start the conversion (32 times 10 bit)
  76   1          while(!ADC0CN0_ADINT);
  77   1          adcraw = ADC0;
  78   1          ADC0CN0_ADINT = 0;
  79   1          return adcraw;;
  80   1      }
  81          
  82          // Gamma-corrected brightness curve (64 steps, gamma = 2.2)
  83          const uint16_t code brightness_curve[MAX_STEPS] = {
  84                  0,     2,     7,    17,    33,    53,    79,   112,
  85                150,   194,   244,   301,   365,   435,   512,   596,
  86                687,   785,   891,  1003,  1123,  1250,  1385,  1527,
  87               1677,  1835,  2000,  2173,  2354,  2543,  2740,  2945,
  88               3158,  3379,  3609,  3846,  4092,  4347,  4609,  4880,
  89               5160,  5448,  5745,  6050,  6364,  6686,  7017,  7357,
  90               7706,  8064,  8430,  8806,  9190,  9583,  9986, 10397,
  91              10817, 11247, 11685, 12133, 12590, 13057, 13532, 14017,
  92              14511, 15015, 15528, 16050, 16582, 17123, 17673, 18234,
  93              18803, 19383, 19972, 20570, 21178, 21796, 22424, 23061,
  94              23708, 24365, 25032, 25709, 26395, 27091, 27797, 28513,
  95              29239, 29975, 30721, 31477, 32243, 33019, 33805, 34602,
  96              35408, 36225, 37051, 37888, 38735, 39592, 40460, 41338,
  97              42226, 43124, 44033, 44952, 45881, 46821, 47772, 48732,
  98              49703, 50685, 51677, 52679, 53692, 54716, 55750, 56795,
  99              57850, 58916, 59992, 61080, 62177, 63286, 64405, 65535
 100          };
 101          
 102          // Gamma-corrected ambient brightness scale (10 levels)
 103          const uint16_t code ambient_scale[10] = {
 104              0, 521, 2395, 5845, 11007, 17983, 26857, 37701, 50575, 65535
 105          };
 106          
 107          
 108          void setBrightnessLevel(uint8_t level) {
 109   1          if (level > 9) level = 9;
 110   1          ambient_level = level;
 111   1          brightness_correction = ambient_scale[level];
 112   1      }
 113          


C51 COMPILER V9.60.0.0   GEN                                                               10/19/2025 22:18:25 PAGE 3   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    322    ----
   CONSTANT SIZE    =    276    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
